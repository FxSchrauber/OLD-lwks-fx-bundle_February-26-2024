// @Maintainer jwrl
// @Released 2023-01-11
// @Author jwrl
// @Created 2023-01-11

/**
 There are a total of ten unique patterns which can be generated by this grey scale generator.
 The patterns consist of three versions of simple ten step bars, three of a compound bar pattern,
 two simple grey scales, and two compound grey scales.  Although it's possible to select both
 full gamut decimal and full gamut hexadecimal versions of the grey scale gradients they will
 and must result in identical waveforms.

 NOTE:  This effect is only suitable for use with Lightworks version 2023 and higher.
*/

//-----------------------------------------------------------------------------------------//
// Lightworks user effect TestGreyscale.fx
//
// Version history:
//
// Built 2023-01-11 jwrl
//-----------------------------------------------------------------------------------------//

#include "_utils.fx"

DeclareLightworksEffect ("Test greyscale", "User", "Technical", "Generates a total of ten unique greyscale test patterns in either full gamut or broadcast limited ranges", kNoFlags);

//-----------------------------------------------------------------------------------------//
// Parameters
//-----------------------------------------------------------------------------------------//

DeclareIntParam (TestType, "Bar scale", kNoGroup, 0, "BT 709 percentage scale|Full gamut decimal|Full gamut hexadecimal");
DeclareIntParam (SetTechnique, "Display type", kNoGroup, 1, "Bars|Composite bars|Gradient|Composite gradient");

//-----------------------------------------------------------------------------------------//
// Definitions and declarations
//-----------------------------------------------------------------------------------------//

// TestType enumeration indexing

#define BT_709   0
#define FULL     1

// Number of rows possible

#define ROWS     12

// BT.709 black (16) and white (235) definitions

#define BT709_B  0.0627451
#define BT709_W  0.92156863

// BT.709 scale factor to convert 0-255 to 0-219.  This is then offset by 16 to produce 16-235.

#define SCALE709 0.85882353

float _binary [11] = { 0.0, BT709_B, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, BT709_W, 1.0 };
float _BT_709 [11] = { BT709_B, 0.14862745, 0.2345098, 0.32039216, 0.40627451, 0.49215686,
                       0.57803922, 0.66392157, 0.74980392, 0.83568628, BT709_W };

//-----------------------------------------------------------------------------------------//
// Code
//-----------------------------------------------------------------------------------------//

// technique Bars

DeclareEntryPoint (Bars)
{
   float x = uv0.x;

   int barIdx = min (floor (x * 11.0), 10);

   if (TestType == BT_709) return float2 (_BT_709 [barIdx], 1.0).xxxy;

   if (TestType == FULL) return float2 (barIdx / 10.0, 1.0).xxxy;

   return float2 (_binary [barIdx], 1.0).xxxy;
}


// technique Composite bars

DeclareEntryPoint (CompositeBars)
{
   float x = uv0.x, y = uv0.y;

   int barIdx = abs ((floor (y + 0.5) * 10.0) - min (floor (x * 11.0), 10.0));
   int z = int (floor (min (y, 1.0 - y) * ROWS));

   if (z == 0) return float2 (abs (floor (y + 0.5) - floor (x + 0.5)), 1.0).xxxy;

   if (z == 1) return float2 ((abs (floor (y + 0.5) - floor (x + 0.5)) * SCALE709) + BT709_B, 1.0).xxxy;

   if (TestType == BT_709) return float2 (_BT_709 [barIdx], 1.0).xxxy;

   if (TestType == FULL) return float2 (barIdx / 10.0, 1.0).xxxy;

   return float2 (_binary [barIdx], 1.0).xxxy;
}


// technique Gradient

DeclareEntryPoint (Gradient)
{
   float x = uv0.x;

   if (TestType == BT_709) return float2 ((x * SCALE709) + BT709_B, 1.0).xxxy;

   return float2 (x, 1.0).xxxy;
}


// technique Composite gradient

DeclareEntryPoint (CompositeGradient)
{
   float x = uv0.x;
   float y = uv0.y;

   int z = int (floor (min (y, 1.0 - y) * ROWS));

   if (z == 0) return float2 (abs (floor (y + 0.5) - floor (x + 0.5)), 1.0).xxxy;

   if (z == 1) return float2 ((abs (floor (y + 0.5) - floor (x + 0.5)) * SCALE709) + BT709_B, 1.0).xxxy;

   if (TestType == BT_709) return float2 ((abs (floor (y + 0.5) - x) * SCALE709) + BT709_B, 1.0).xxxy;

   return float2 (abs (floor (y + 0.5) - x), 1.0).xxxy;
}

